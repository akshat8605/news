{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","news1","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchChange","event","setState","search","target","value","filter","users","section","toLowerCase","includes","state","sorting","sb","sort","a","b","published_date","split","reverse","join","localeCompare","updated_date","created_date","key","Math","random","_this2","fetch","method","then","response","json","result","news","results","i","length","push","catch","err","_this$state","console","log","react_default","createElement","className","htmlFor","name","onChange","onclick","type","placeholder","map","newa","href","url","title","abstract","des_facet","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9fe27f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst initialstate={\n        \n}\n var news1=[]\n\nclass App extends Component {\n  constructor(){\n      super();\n      this.state={key:Math.random(),\n        search:''\n       }\n      }\ncomponentDidMount(){\n    fetch('https://api.nytimes.com/svc/topstories/v2/home.json?api-key=bb31937820704c89bd4a6653587bf8ef',{\n         method:'GET'\n         })  .then(response=>response.json())  .then(result=>{\n       this.setState({news:result.results})\n       for (var i = result.results.length - 1; i >= 0; i--) {\n         news1.push(result.results[i])\n       }\n           this.setState({key:Math.random()})\n    \n     })\n     .catch(function(err) {\n          throw err;\n        })\n  \n}\n searchChange=(event)=>{\n  this.setState({search:event.target.value})\n news1=news1.filter(users => {\n        return users.section.toLowerCase().includes(this.state.search.toLowerCase());\n      })\n }\n sorting=(event)=>{\n  let sb=event.target.value;\n  if(sb==='published_date'){\n  news1=news1.sort((a, b) =>\n  a.published_date.split('/').reverse().join().localeCompare(b.published_date.split('/').reverse().join()));  }\n  else{\n    if(sb==='updated_date'){\n      news1=news1.sort((a, b) =>\n  a.updated_date.split('/').reverse().join().localeCompare(b.updated_date.split('/').reverse().join())); \n    }else{\n      if(sb==='created_date'){\n        news1=news1.sort((a, b) =>\n  a.created_date.split('/').reverse().join().localeCompare(b.created_date.split('/').reverse().join()));\n      }\n    }\n  }\n  this.setState({key:Math.random()})\n }\n  \n  render() {\n    const {news,key}=this.state;\n  console.log(news1)\n  return( <div key={key}> \n   <p className='h1 tc b pa4 pt2 ba f3-l f4-m f5-ns f6 w-30-l w-30-m w-40 center br4'>Top Stories</p>\n    <label className=\" fw6 lh-copy f6 mr2\" htmlFor=\"sort\">Sort By</label>\n    <select name='sort'\n    onChange={this.sorting}>\n    <option value=\"published_date\" onclick>published date</option>\n    <option value=\"updated_date\">Updated date</option>\n    <option value=\"created_date\">Created date</option> \n    </select>\n    <input \n    className='pa3-l pa3-m pa2 ba w5-l w4 b--green h1 bg-white fr   mb0 mt0 mr2 br2'\n    type='text'\n     placeholder='section'\n     onChange={this.searchChange}\n    />\n    {news1.map((newa,i)=>{\n          return(\n             <a href={newa.url} className='link f4-l f5-m f6-ns f7 tc ba v-mid h4 dim pointer w-100 fr mr0 flex flex-column bb' >\n                 <span >Title: {newa.title}</span><br/>\n                  <span >Abstrect: {newa.abstract}</span>\n                <span >{newa.des_facet}</span>\n              </a>\n                        )\n                })}\n     </div> )\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}